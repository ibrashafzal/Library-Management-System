{
  "openapi": "3.0.1",
  "info": {
    "title": "Library Management System",
    "description": "This Library Management System API is designed to automate and simplify common library operations.\n\n It provide endpoint to perform following operations: \n\nAdd Update Delete and get all Students.\n\nAdd Update Delete and get all Books.\n\nKeep Record of issuing books & also returning books.",
    "version": "v1"
  },
  "paths": {
    "/api/Book": {
      "get": {
        "tags": [
          "Book"
        ],
        "summary": "Get All Books.",
        "description": "This endpoint retrieves all book with their information.\r\nExample: GET /api/Book",
        "responses": {
          "200": {
            "description": "List of Books found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookData"
                }
              }
            }
          },
          "204": {
            "description": "List of Books not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              }
            }
          },
          "404": {
            "description": "API key not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Book"
        ],
        "summary": "Add a new book.",
        "description": "This endpoint of API allow you to add a new book.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Book Added Successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              }
            }
          },
          "409": {
            "description": "Book already exists",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Book"
        ],
        "summary": "Update a Book.",
        "description": "This endpoint of API provide a facility to update some data of an existing book.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The unique identifier of the book to update.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Book Updated Succesfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookData"
                }
              }
            }
          },
          "404": {
            "description": "Invalid Input",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Book"
        ],
        "summary": "Delete a book",
        "description": "At this endpoint of API you can delete a particular book.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The unique identifier of the book to delete.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Book deleted successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookData"
                }
              }
            }
          },
          "404": {
            "description": "Book with the specified ID not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/Book/{id}": {
      "get": {
        "tags": [
          "Book"
        ],
        "summary": "Get a required book by Id.",
        "description": "This endpoint of API provide a detail of a particular book.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the book.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Book found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookData"
                }
              }
            }
          },
          "404": {
            "description": "Book not exist of that Id",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/Book/books/report": {
      "get": {
        "tags": [
          "Book"
        ],
        "summary": "Get all books in PDF with download links.",
        "description": "At this endpoint you get all books details in PDF.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Issue": {
      "post": {
        "tags": [
          "Issue"
        ],
        "summary": "Issue a new book to Student",
        "description": " This endpoint is used to issue a book to a student.\r\nIt records the student, the book, the issue date, and the due date.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/IssueDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Book issued successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IssueDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueDTO"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Issue"
        ],
        "summary": "Retrieve all issued books.",
        "description": "This endpoint returns a list of all issued books with details about the student, book, issue date, due date, and status.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IssueData1"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueData1"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueData1"
                }
              }
            }
          },
          "204": {
            "description": "list of issued books not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/Issue/{id}": {
      "get": {
        "tags": [
          "Issue"
        ],
        "summary": "Retrieve details of a specific issued book by issue ID.",
        "description": "This endpoint retrieves the details of a specific issued book record by its unique issueId.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of issued book",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Issued book found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IssueData1"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueData1"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueData1"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/Issue/Issue/report": {
      "get": {
        "tags": [
          "Issue"
        ],
        "summary": "Get all issued books in PDF with download link",
        "description": "This endpoint generates a PDF file containing all issued books with details like student, book, issue date, due date, and return status.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Student": {
      "get": {
        "tags": [
          "Student"
        ],
        "summary": "Retrieve All Students.",
        "description": "This endpoint returns a list of all registered students in the system with their details.",
        "responses": {
          "200": {
            "description": "List of Student found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StudentData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudentData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudentData"
                }
              }
            }
          },
          "204": {
            "description": "List of Student not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Student"
        ],
        "summary": "Add a new Student.",
        "description": "This endpoint is used to register a new student in the system by providing their personal and contact details.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StudentDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StudentDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StudentDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Student Added Successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StudentData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudentData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudentData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              }
            }
          },
          "409": {
            "description": "Student already exists",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Student"
        ],
        "summary": "Update a Student.",
        "description": "This endpoint updates the information of an existing student. You must provide a valid studentId in the path.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The unique identifier of the Student to update.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StudentDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StudentDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StudentDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Student Updated Succesfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StudentData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudentData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudentData"
                }
              }
            }
          },
          "404": {
            "description": "Invalid Input",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Student"
        ],
        "summary": "Delete a Student",
        "description": "This endpoint removes a student from the system using their unique studentId.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The unique identifier of the Student to delete.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Student deleted successfully"
          },
          "404": {
            "description": "Student with the specified ID not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Student/{id}": {
      "get": {
        "tags": [
          "Student"
        ],
        "summary": "Get a required student by Id.",
        "description": "This endpoint retrieves the full details of a single\r\n            student using their unique studentId.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the student.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Student found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StudentData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudentData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudentData"
                }
              }
            }
          },
          "404": {
            "description": "Student not exist of that Id",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/Student/Student/report": {
      "get": {
        "tags": [
          "Student"
        ],
        "summary": "Get all Student in PDF with download links.",
        "description": "This endpoint generates and returns a PDF report of all registered students in the system.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BookDTO": {
        "type": "object",
        "properties": {
          "tittle": {
            "type": "string",
            "description": "Book title",
            "nullable": true,
            "example": "C# in Depth"
          },
          "author": {
            "type": "string",
            "description": "Author of the book",
            "nullable": true,
            "example": "Jon Skeet"
          },
          "quantity": {
            "type": "integer",
            "description": "Number of copies available",
            "format": "int32",
            "example": 10
          },
          "category": {
            "type": "string",
            "description": "Category of the book",
            "nullable": true,
            "example": "Programming"
          }
        },
        "additionalProperties": false
      },
      "BookData": {
        "type": "object",
        "properties": {
          "tittle": {
            "type": "string",
            "description": "Book title",
            "nullable": true,
            "example": "C# in Depth"
          },
          "author": {
            "type": "string",
            "description": "Author of the book",
            "nullable": true,
            "example": "Jon Skeet"
          },
          "quantity": {
            "type": "integer",
            "description": "Number of copies available",
            "format": "int32",
            "example": 10
          },
          "category": {
            "type": "string",
            "description": "Category of the book",
            "nullable": true,
            "example": "Programming"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EmptyResult": {
        "type": "object",
        "additionalProperties": false
      },
      "IssueDTO": {
        "type": "object",
        "properties": {
          "studentId": {
            "type": "integer",
            "description": "Student ID",
            "format": "int32"
          },
          "bookId": {
            "type": "integer",
            "description": "Book ID",
            "format": "int32",
            "example": 1
          },
          "issueQuantity": {
            "type": "integer",
            "description": "How many books you want to issue",
            "format": "int32",
            "example": 5
          }
        },
        "additionalProperties": false
      },
      "IssueData1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "studentId": {
            "type": "integer",
            "format": "int32"
          },
          "bookId": {
            "type": "integer",
            "format": "int32"
          },
          "issueQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "issueDate": {
            "type": "string",
            "format": "date-time"
          },
          "expectedReturnDate": {
            "type": "string",
            "format": "date-time"
          },
          "returnDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isReturned": {
            "type": "boolean"
          },
          "fine": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "StudentDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of Student",
            "nullable": true,
            "example": "John"
          },
          "email": {
            "type": "string",
            "description": "Enail of Student",
            "nullable": true,
            "example": "John@example.com"
          },
          "class": {
            "type": "string",
            "description": "Name of Student",
            "nullable": true,
            "example": "A"
          },
          "contact": {
            "type": "string",
            "description": "Class of Student",
            "nullable": true,
            "example": "3334-000323"
          }
        },
        "additionalProperties": false
      },
      "StudentData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of Student",
            "nullable": true,
            "example": "John"
          },
          "email": {
            "type": "string",
            "description": "Enail of Student",
            "nullable": true,
            "example": "John@example.com"
          },
          "class": {
            "type": "string",
            "description": "Name of Student",
            "nullable": true,
            "example": "A"
          },
          "contact": {
            "type": "string",
            "description": "Class of Student",
            "nullable": true,
            "example": "3334-000323"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "type": "apiKey",
        "description": "Enter your API key",
        "name": "X-API-KEY",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "ApiKey": [ ]
    }
  ],
  "tags": [
    {
      "name": "Book",
      "description": "Book APIs Endpoints for managing library books:"
    },
    {
      "name": "Issue",
      "description": "Issue APIs Endpoints for issuing and returning books:"
    },
    {
      "name": "Student",
      "description": "Student API Endpoint for managing students:"
    }
  ]
}